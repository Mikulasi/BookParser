06-07-2014 23:51:41 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - \\s*fish\\s*");
06-07-2014 23:51:41 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - \\d+) fish (\\d+) fish (\\w+) fish (\\w+)");
06-07-2014 23:51:41 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - \\s+" will return no empty tokens since it matches multiple instances of the delimiter. The delimiting pattern "\\s" could return empty tokens since it only passes one space at a time.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - ï»¿public final class Scanne
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
extends Objec
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
implements Iterator<String>, Closeable
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
A simple text scanner which can parse primitive types and strings using regular expressions.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various next methods.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

For example, this code allows a user to read a number from System.in:
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 


     Scanner sc = new Scanner(System.in);
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     int i = sc.nextInt();
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 
As another example, this code allows long types to be assigned from entries in a file myNumbers:
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 


      Scanner sc = new Scanner(new File("myNumbers"));
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
      while (sc.hasNextLong()) {
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
          long aLong = sc.nextLong();
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
      }
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 
The scanner can also use delimiters other than whitespace. This example reads several items in from a string:
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 


     String input = "1 fish 2 fish red fish blue fish";
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*");
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     System.out.println(s.nextInt());
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     System.out.println(s.nextInt());
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     System.out.println(s.next());
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     System.out.println(s.next());
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     s.close();
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 
prints the following output:
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 


     1
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     2
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     re
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     blue
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 
The same output can be generated with this code, which uses a regular expression to parse all four tokens at once:
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 


     String input = "1 fish 2 fish red fish blue fish";
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     Scanner s = new Scanner(input);
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     s.findInLine("(\\d+) fish (\\d+) fish (\\w+) fish (\\w+)");
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     MatchResult result = s.match();
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     for (int i=1; i<=result.groupCount();
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
         System.out.println(result.group(i));
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
     s.close();
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 
The default whitespace delimiter used by a scanner is as recognized by Character.isWhitespace. The reset() method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

A scanning operation may block waiting for input.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

The next() and hasNext() methods and their primitive-type companion methods (such as nextInt() and hasNextInt()) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both hasNext and next methods may block waiting for further input. Whether a hasNext method blocks has no connection to whether or not its associated next method will block.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

The findInLine(java.lang.String), findWithinHorizon(java.lang.String, int), and skip(java.util.regex.Pattern) methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

When a scanner throws an InputMismatchException, the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

Depending upon the type of delimiting pattern, empty tokens may be returned. For example, the pattern "\\s+" will return no empty tokens since it matches multiple instances of the delimiter. The delimiting pattern "\\s" could return empty tokens since it only passes one space at a time.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

A scanner can read text from any object which implements the Readable interface. If an invocation of the underlying readable's Readable.read(java.nio.CharBuffer) method throws an IOException then the scanner assumes that the end of the input has been reached. The most recent IOException thrown by the underlying readable can be retrieved via the ioException() method.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

When a Scanner is closed, it will close its input source if the source implements the Closeable interface.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

A Scanner is not safe for multithreaded use without external synchronization.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

Unless otherwise mentioned, passing a null parameter into any method of a Scanner will cause a NullPointerException to be thrown.
06-07-2014 23:54:29 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 

A scanner will default to interpreting numbers as decimal unless a different radix has been set by using the useRadix(int) method. The reset() method will reset the value of the scanner's radix to 10 regardless of whether it was previously changed.
