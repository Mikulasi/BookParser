17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - ﻿Towards the end of last week I started thinking how to deal with large amounts of XML data in a resource-friendly way.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
The main problem that I wanted to solve was how to process large XML files in chunks while at the same time providing upstream/downstream systems with some data to process.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Of course I’ve been using JAXB technology for few years now; the main advantage of using JAXB is the quick time-to-market;
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
if one possesses an XML schema, there are tools out there to auto-generate the corresponding Java domain model classes automatically
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
(Eclipse Indigo, Maven jaxb plugins in various sauces, ant tasks, to name a few). The JAXB API then offers a Marshaller and an Unmarshaller to write/read XML data, mapping the Java domain model.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
When thinking of JAXB as solution for my problem I suddendlly realised that JAXB keeps the whole objectification of the XML schema in memory, so the obvious question was:
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
“How would our infrastructure cope with large XML files (e.g. in my case with a number of elements > 100,000) if we were to use JAXB?”.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
I could have simply produced a large XML file, then a client for it and find out about memory consumption.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
As one probably knows there are mainly two approaches to processing XML data in Java: DOM and SAX.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
With DOM, the XML document is represented into memory as a tree; DOM is useful if one needs cherry-pick access to the tree nodes or if one needs to write brief XML documents.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
On the other side of the spectrum there is SAX, an event-driven technology, where the whole document is parsed one XML element at the time, and for each XML significative event,
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
callbacks are “pushed” to a Java client which then deals with them (such as START_DOCUMENT, START_ELEMENT, END_ELEMENT, etc).
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Since SAX does not bring the whole document into memory but it applies a cursor like approach to XML processing it does not consume huge amounts of memory.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
The drawback with SAX is that it processes the whole document start to finish; this might not be necessarily what one wants for large XML documents.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
In my scenario, for instance, I’d like to be able to pass to downstream systems XML elements as they are available, but at the same time maybe
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
I’d like to pass only 100 elements at the time, implementing some sort of pagination solution. DOM seems too demanding from a memory-consumption point of view,
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
whereas SAX seems to coarse-grained for my needs.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
I remembered reading something about STax, a Java technology which offered a middle ground between the capability to pull XML eleme
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
(as opposed to pushing XML elements, e.g. SAX) while being RAM-friendly. I then looked into the technology and decided that STax was probably the compromise I was looking for;
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 however I wanted to keep the easy programming model offered by JAXB, so I really needed a combination of the two.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 While investigating STax, I came across Woodstox; this open source project promises to be a faster XML parser than many othrers, so I decided to include it in my benchmark as well.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 I now had all elements to create a benchmark to give me memory consumption and processing speed metrics when processing large XML documents.
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
The benchmark p
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
In order to create a benchmark I needed to do the following:
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Create an XML schema which defined my domain model. This would be the input for JAXB to create the Java domain mode
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Create three large XML files representing the model, with 10,000 / 100,000 / 1,000,000 elements respectively
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Have a pure JAXB client which would unmarshall the large XML files completely in memory
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Have a STax/JAXB client which would combine the low-memory consumption of SAX technologies with the ease of programming model offered by JAXB
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Have a Woodstox/JAXB client with the same characteristics of the STax/JAXB client (in few words I just wanted to change the underlying parser and see if I could obtain any performance boo
17-07-2014 18:31:39 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Record both memory consumption and speed of processing (e.g. how quickly would each solution make XML chunks available in memory as JAXB domain model classe
17-07-2014 18:31:40 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Make the results available graphically, since, as we know, one picture tells one thousands words.
17-07-2014 18:47:48 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - ﻿Towards the end of last week I started thinking how to deal with large amounts of XML data in a resource-friendly way.
17-07-2014 18:47:48 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
The main problem that I wanted to solve was how to process large XML files in chunks while at the same time providing upstream/downstream systems with some data to process.
17-07-2014 18:47:48 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Of course I’ve been using JAXB technology for few years now; the main advantage of using JAXB is the quick time-to-market;
17-07-2014 18:47:48 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
if one possesses an XML schema, there are tools out there to auto-generate the corresponding Java domain model classes automatically
17-07-2014 18:47:48 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
(Eclipse Indigo, Maven jaxb plugins in various sauces, ant tasks, to name a few). The JAXB API then offers a Marshaller and an Unmarshaller to write/read XML data, mapping the Java domain model.
17-07-2014 18:47:48 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
When thinking of JAXB as solution for my problem I suddendlly realised that JAXB keeps the whole objectification of the XML schema in memory, so the obvious question was:
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
“How would our infrastructure cope with large XML files (e.g. in my case with a number of elements > 100,000) if we were to use JAXB?”.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
I could have simply produced a large XML file, then a client for it and find out about memory consumption.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
As one probably knows there are mainly two approaches to processing XML data in Java: DOM and SAX.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
With DOM, the XML document is represented into memory as a tree; DOM is useful if one needs cherry-pick access to the tree nodes or if one needs to write brief XML documents.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
On the other side of the spectrum there is SAX, an event-driven technology, where the whole document is parsed one XML element at the time, and for each XML significative event,
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
callbacks are “pushed” to a Java client which then deals with them (such as START_DOCUMENT, START_ELEMENT, END_ELEMENT, etc).
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Since SAX does not bring the whole document into memory but it applies a cursor like approach to XML processing it does not consume huge amounts of memory.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
The drawback with SAX is that it processes the whole document start to finish; this might not be necessarily what one wants for large XML documents.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
In my scenario, for instance, I’d like to be able to pass to downstream systems XML elements as they are available, but at the same time maybe
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
I’d like to pass only 100 elements at the time, implementing some sort of pagination solution. DOM seems too demanding from a memory-consumption point of view,
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
whereas SAX seems to coarse-grained for my needs.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
I remembered reading something about STax, a Java technology which offered a middle ground between the capability to pull XML eleme
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
(as opposed to pushing XML elements, e.g. SAX) while being RAM-friendly. I then looked into the technology and decided that STax was probably the compromise I was looking for;
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 however I wanted to keep the easy programming model offered by JAXB, so I really needed a combination of the two.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 While investigating STax, I came across Woodstox; this open source project promises to be a faster XML parser than many othrers, so I decided to include it in my benchmark as well.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
 I now had all elements to create a benchmark to give me memory consumption and processing speed metrics when processing large XML documents.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
The benchmark p
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
In order to create a benchmark I needed to do the following:
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Create an XML schema which defined my domain model. This would be the input for JAXB to create the Java domain mode
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Create three large XML files representing the model, with 10,000 / 100,000 / 1,000,000 elements respectively
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Have a pure JAXB client which would unmarshall the large XML files completely in memory
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Have a STax/JAXB client which would combine the low-memory consumption of SAX technologies with the ease of programming model offered by JAXB
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Have a Woodstox/JAXB client with the same characteristics of the STax/JAXB client (in few words I just wanted to change the underlying parser and see if I could obtain any performance boo
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Record both memory consumption and speed of processing (e.g. how quickly would each solution make XML chunks available in memory as JAXB domain model classe
17-07-2014 18:47:49 INFO  main by.epam.bookparser.composite.TextParser:parseToParagraph:57 - 
Make the results available graphically, since, as we know, one picture tells one thousands words.
17-07-2014 18:47:49 INFO  main by.epam.bookparser.main.TextMain:main:13 - by.epam.bookparser.composite.Text@3dbea611
17-07-2014 19:08:19 ERROR main by.epam.bookparser.composite.TextParser:initialization:34 - java.io.FileNotFoundException: \src\resources\Book.txt (The system cannot find the path specified)
17-07-2014 19:08:19 INFO  main by.epam.bookparser.main.TextMain:main:13 - by.epam.bookparser.composite.Text@4f7a95c6
17-07-2014 19:09:28 ERROR main by.epam.bookparser.composite.TextParser:initialization:34 - java.io.FileNotFoundException: \src\resources\Book.txt (The system cannot find the path specified)
17-07-2014 19:13:47 ERROR main by.epam.bookparser.composite.TextParser:initialization:34 - java.io.FileNotFoundException: \src\resources\Book.txt (The system cannot find the path specified)
17-07-2014 19:15:02 ERROR main by.epam.bookparser.composite.TextParser:initialization:33 - java.io.FileNotFoundException: \src\resources\Book.txt (The system cannot find the path specified)
17-07-2014 19:15:26 ERROR main by.epam.bookparser.composite.TextParser:initialization:33 - java.io.FileNotFoundException: resources\Book.txt (The system cannot find the path specified)
17-07-2014 19:15:52 ERROR main by.epam.bookparser.composite.TextParser:initialization:33 - java.io.FileNotFoundException: ..\resources\Book.txt (The system cannot find the path specified)
17-07-2014 19:16:29 ERROR main by.epam.bookparser.composite.TextParser:initialization:33 - java.io.FileNotFoundException: Book.txt (The system cannot find the file specified)
17-07-2014 19:18:03 ERROR main by.epam.bookparser.composite.TextParser:initialization:34 - java.io.FileNotFoundException: Book.txt (The system cannot find the file specified)
17-07-2014 19:19:03 ERROR main by.epam.bookparser.composite.TextParser:initialization:33 - java.io.FileNotFoundException: Book.txt (The system cannot find the file specified)
17-07-2014 23:25:01 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:31:37 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:31:37 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:31:37 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:33:10 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:33:10 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:33:10 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:34:31 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:34:31 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
17-07-2014 23:34:31 ERROR main by.epam.bookparser.Parser.TextParser:initialization:37 - java.io.FileNotFoundException: text.txt (The system cannot find the file specified)
